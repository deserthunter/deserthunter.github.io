(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{200:function(a,s,n){"use strict";n.r(s);var r=n(0),t=Object(r.a)({},function(){var a=this,s=a.$createElement,n=a._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h2",{attrs:{id:"ast树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ast树","aria-hidden":"true"}},[a._v("#")]),a._v(" AST树")]),a._v(" "),n("h6",{attrs:{id:"示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例","aria-hidden":"true"}},[a._v("#")]),a._v(" "),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API#Node_objects",target:"_blank",rel:"noopener noreferrer"}},[a._v("示例"),n("OutboundLink")],1)]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function add(a, b) {\n    return a + b\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br")])]),n("h6",{attrs:{id:"ast-解析库"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ast-解析库","aria-hidden":"true"}},[a._v("#")]),a._v(" AST 解析库")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("npm i recast -S\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br")])]),n("ul",[n("li",[a._v("解析javascript 源码")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('//recast\nconst recast = require("recast");\n// 我们使用了很奇怪格式的代码，想测试是否能维持代码结构\nconst code =\n  `\n  function add(a, b) {\n    return a +\n      // 有什么奇怪的东西混进来了\n      b\n  }\n  `\n// 解析机器\nconst ast = recast.parse(code);\n// ast可以处理很巨大的代码文件\n// 但我们现在只需要代码块的第一个body，即add函数\nconst add  = ast.program.body[0]\nconsole.log(add)\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br")])]),n("ul",[n("li",[a._v("承接上面代码输出,还原为函数")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('// 引入变量声明，变量符号，函数声明三种“模具”\nconst {variableDeclaration, variableDeclarator, functionExpression} = recast.types.builders\n\n// 将准备好的组件置入模具，并组装回原来的ast对象。\nast.program.body[0] = variableDeclaration("const", [\n  variableDeclarator(add.id, functionExpression(\n    null, // Anonymize the function expression.\n    add.params,\n    add.body\n  ))\n]);\n\n//将AST对象重新转回可以阅读的代码  \n//如果想要合适完美，可以测试下 recast.prettyPrint\nconst output = recast.print(ast).code;\n\nconsole.log(output)\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br")])]),n("p",[a._v("打印输出")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("const add = function(a, b) {\n  return a +\n    // 有什么奇怪的东西混进来了\n    b\n};\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br")])]),n("h2",{attrs:{id:"javascript-编译"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javascript-编译","aria-hidden":"true"}},[a._v("#")]),a._v(" javascript 编译")]),a._v(" "),n("h6",{attrs:{id:"v8"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#v8","aria-hidden":"true"}},[a._v("#")]),a._v(" v8")]),a._v(" "),n("h6",{attrs:{id:"squirrelfish-extreme"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#squirrelfish-extreme","aria-hidden":"true"}},[a._v("#")]),a._v(" SquirrelFish Extreme")]),a._v(" "),n("h2",{attrs:{id:"javascript引擎"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javascript引擎","aria-hidden":"true"}},[a._v("#")]),a._v(" JavaScript引擎")]),a._v(" "),n("ul",[n("li",[a._v("什么是虚拟机")])]),a._v(" "),n("blockquote",[n("p",[a._v("虚拟机是指在既定的计算机系统中运用软件模拟的具有完整硬件系统功能的计算机系统。根据虚拟机的模拟以及代替现实计算机的精确度，它们被分为了很多种类型。其中流程虚拟机的功能性较低，只能运行一道程序或流程。比如，Wine就是一种可以让你在Linux计算机上运行Windows运用程序的流程虚拟机，但它并不能提供一套完整的Windows操作系统。JavaScript引擎是一种为解释和执行JavaScript代码而专门设计的流程虚拟机。")])]),a._v(" "),n("ul",[n("li",[a._v("JavaScript引擎完成了什么事")])]),a._v(" "),n("blockquote",[n("p",[a._v("JavaScript的基本工作就是将开发者写的JavaScript代码转换成能被浏览器理解甚至能在应用程序上运用的最优化的快捷代码。事实上，JavaScriptCore称自己是优化的虚拟机。"),n("br"),a._v("\n更确切地说，每一个 JavaScript 引擎都实现了ECMAScript的一种版本，而JavaScript 是它的一种方言叫法。JavaScript引擎会随着ECMAScript的发展而进步，因为如此多不同的引擎都要与不同的浏览器一起运作，如headless browser（如PhantomJS）, 或者像Node.js这样的执行环境。"),n("br"),a._v("\n通过以上对虚拟机的定义，将JavaScript引擎称为流程虚拟机也就是理所当然的了。因为它唯一的目的就是要读取和编译JavaScript代码。然而这并不意味着它只是一种简单的引擎。举个例子，JavaScriptCore有6个分区来分析、翻译、优化以及垃圾收集JavaScript代码。")])]),a._v(" "),n("ul",[n("li",[a._v("JavaScript引擎是如何运作的")])]),a._v(" "),n("blockquote",[n("p",[a._v("这取决于引擎。WebKit的JavaScriptCore以及谷歌的V8引擎之所以能引起我们的兴趣是因为NativeScript对它们起了杠杠作用。这两种引擎不同程度地掌握着过程码。"),n("br"),a._v("\nJavaScriptCore是通过一系列的步骤去编译和优化脚本。"),n("br"),a._v("\n它会对词汇进行分析，将其分解成一系列的记号，或附上某些既定的意义。这些记号之后会被分析程序理出句法，并嵌入句法树。之后4个JIT（及时）程序开始运行、分析和执行那些分析程序产生的字节码。\n简单讲，JavaScript引擎将你的源代码分解成串（又叫做分词），再将那些串转换成为编译器能够理解的字节码，然后将其执行。"),n("br"),a._v("\n用C++编写的谷歌的V8引擎也能编译和解释JavaScript源代码，掌握内存记忆配置且可垃圾回收残留物。\n它由2个能够将源代码直接转换成计算机代码的编译器组成。")])]),a._v(" "),n("p",[a._v("Full-codegen：输出非优化代码的快速编译器。\nCrankshaft：输出快速，优化代码的慢速编译器。")]),a._v(" "),n("p",[a._v("如果Crankshaft认为由Full-codegen产生的不够优化的代码需要优化，它将会取而代之，这就是“crankshafting”流程。\n有趣的事实：”机轴“是运用在自动化产业中内部氧化引擎里的一个完整的部分。这种众所周知的引擎在更高级的载体也就是V8中有所运用。\n若计算机代码是由编译过程产生的，那么这个引擎就会在浏览器中显示出所有的ECMA标准规定的数据类型、操作员、客体和功能，或者任何需要用到它们的运行环境，如NativeScript.")]),a._v(" "),n("ul",[n("li",[a._v("JavaScript引擎有哪些\n| Browser, Headless Browser, or Runtime  |    JavaScript Engine      |\n|----------|:-------------😐\n| Mozilla |  Spidermonkey  |\n| Chrome  |    V8    |\n| Safari  | JavaScriptCore |\n| IE and Edge  | Chakra |\n| PhantomJS  | JavaScriptCore |\n| HTMLUnit\t  | Rhino |\n| TrifleJS  | V8 |\n| Node.js   | V8 |\n| io.js   | V8 |")])]),a._v(" "),n("h2",{attrs:{id:"webassemble"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#webassemble","aria-hidden":"true"}},[a._v("#")]),a._v(" WebAssemble")]),a._v(" "),n("h2",{attrs:{id:"llvm"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#llvm","aria-hidden":"true"}},[a._v("#")]),a._v(" LLVM")])])},[],!1,null,null,null);s.default=t.exports}}]);